
To compare differences between 2 files:
diff -u old_one new_one


Different ways for version-control:
-Manual
-Dropbox
-Google doc
-Wikipedia
-Git
-SVN

To see history of commits: git log
To compare different commits: diff -u [commit id] [commit id]

When to Commit: One Commit Per Logical Change

Repository: track multiple files together

>>>git log --stat  :gives some statistics about which files have changed in eachcommit

>>>git config --global color.ui auto : To get colored diff output

>>>git diff [old commit id] [new commit id]

Git Errors and Warnings Solution
Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

>>> git checkout [commit id] to go back previous commit and activate it


To find the bug:
	1. git checkout [commit ids] until you find the bug
	2. git diff [bug commit id] [previous commit id] 

>> git init ==> to initialize git repository

>> git status ==>  to check the git status of repository

>> git add <untracked file>

>> git reset [file]  ==> to remove file from staging area
>> git reset --hard  ==> to remove all files from staging area

>> git diff                 ==> compares working dir and staging dir
>> git diff --staged        ==> compares staging dir and commit1(last commit)
>> git diff commit1 commit2 ==> compares 2 commits 

>> git branch [branch name] ==> making new branch
>> git checkout [branch name] ==> change to new branch

>> git log --graph --oneline master coins ==> The full command Caroline types to see the visual representation of the commit history

>> git checkout -b  [branch name] == git branch [branch name] AND git checkout [branchname]

>> git checkout [commit id] ==> when we are here, if you do some changes, it will be lost, unless we do git checkout -b  [branch name] 


